This is a fun problem

What we have

	- Infinite empty plates [ People ]
	- Initial pancake-plate distribution 
	- Bounds of the number of Pancakes that can be on a Plate
	- 1 pancake on a plate is eaten in 1 min
	- You can pause the whole eating process for 1 min to move pancakes from ONE plate to ANY other(including empty)  

What we want

	- Fastest way to finish all the pancakes






Example 1:

1 plate 4 Pancakes

				4
					+1
			    2      2

2 + 1 = 3 

=> 3 min to solve that problem


Example 2:

1 plate 9 pancakes

				9
					+1
			    3     6
					+1
				3   3

3 + 1 + 1 = 5

=> 5 min to solve that problem


Algoritm Discussion

	- Factors which limit the speed of the Process(finishing all the Pancakes with the given instructions)
		-> The longest stack ( Min time to finish all the Pancakes at any given time )
		-> Number of Big Stacks after each split, to see if another split is really worth it.

	- Define Big Stack..
		-> A stack which is more than half the size of the Largest Stack is a 'Big Stack' 
	

	X    -> Largest Stack
	P    -> A Big Stack
	s    -> small Stack (Has no hand in slowing down a program

	T    -> Total time for the whole process
	C(P) -> No. of P's at a given time	
	
